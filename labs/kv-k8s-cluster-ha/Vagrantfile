# kuberverse kubernetes cluster lab
# version: 0.2.0
# description: this Vagrantfile creates a cluster with masters and workers
# created by Artur Scheiner - artur.scheiner@gmail.com
# dependencies: https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/common.sh
#               https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/scaler.sh
#               https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/master.sh
#               https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/worker.sh

# Is not recommended, but you can change the base box.
# This means that all the VMs will use the same image.
# For vmware_desktop provider use
BOX_IMAGE = "bento/ubuntu-18.04"
# For virtualbox provider you can choose to use
# bento or kuberverse images. The difference is
# that kuberverse images are pre-loaded with
# the packages needed to create the cluster
# that means less time to build the cluster.
# BOX_IMAGE = "kuberverse/ubuntu-16.04"

# Define the k8s version to be used on this lab.
KUBE_VERSION = "1.22.3"

# Define the container runtime that will be used on
# your lab. From k8s v1.22 the default runtime is containerd.
# You can choose between containerd|docker
CONTAINER_RUNTIME = "containerd"

# Define CNI Provider
# Choose between calico|weave|flannel
CNI_PROVIDER = "weave"

# Change these values if you wish to play with the 
# cluster size. Do this before starting your cluster
# provisioning.
MASTER_COUNT = 1
WORKER_COUNT = 1

# Change these values if you wish to play with the 
# VMs memory resources.
# Kubernetes pre-flight for the MASTER_NODES now requires 1700+ of memory.
SCALER_MEMORY = 512
MASTER_MEMORY = 2048
WORKER_MEMORY = 1024

# Change these values if you wish to play with the
# networking settings of your cluster 
KV_LAB_NETWORK = "10.8.8.0"

# This value changes the intra-pod network
POD_CIDR = "172.18.0.0/16"


KVMSG = "Kuberverse Kubernetes Cluster Lab"

COMMON_SCRIPT_URL = "https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/common.sh"
SCALER_SCRIPT_URL = "https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/scaler.sh"
MASTER_SCRIPT_URL = "https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/master.sh"
WORKER_SCRIPT_URL = "https://raw.githubusercontent.com/arturscheiner/kuberverse/master/labs/kv-k8s-cluster-ha/worker.sh"

def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
 end

def red(text); colorize(text, 31); end
def green(text); colorize(text, 32); end
def yellow(text); colorize(text, 33); end
def blue(text); colorize(text, 34); end

class String
  def black; "\e[30m#{self}\e[0m" end
  def red; "\e[31m#{self}\e[0m" end
  def green; "\e[32m#{self}\e[0m" end
  def brown; "\e[33m#{self}\e[0m" end
  def blue; "\e[34m#{self}\e[0m" end
  def magenta; "\e[35m#{self}\e[0m" end
  def cyan; "\e[36m#{self}\e[0m" end
  def gray; "\e[37m#{self}\e[0m" end
 
  def bg_black; "\e[40m#{self}\e[0m" end
  def bg_red; "\e[41m#{self}\e[0m" end
  def bg_green; "\e[42m#{self}\e[0m" end
  def bg_brown; "\e[43m#{self}\e[0m" end
  def bg_blue; "\e[44m#{self}\e[0m" end
  def bg_magenta; "\e[45m#{self}\e[0m" end
  def bg_cyan; "\e[46m#{self}\e[0m" end
  def bg_gray; "\e[47m#{self}\e[0m" end
 
  def bold; "\e[1m#{self}\e[22m" end
  def italic; "\e[3m#{self}\e[23m" end
  def underline; "\e[4m#{self}\e[24m" end
  def blink; "\e[5m#{self}\e[25m" end
  def reverse_color; "\e[7m#{self}\e[27m" end
end

class KvLab

  def initialize
      puts "********** #{green(KVMSG)} **********"

      checkmark = "\u2713"
      puts checkmark.force_encoding('utf-8').green.bold.blink

      puts "---- Provisioned with k8s #{yellow(KUBE_VERSION)}".blue
      puts "---- Container runtime is: #{yellow(CONTAINER_RUNTIME)}"
      puts "---- CNI Provider is: #{yellow(CNI_PROVIDER)}"
      puts "---- #{MASTER_COUNT} Masters Nodes"
      puts "---- #{WORKER_COUNT} Worker(s) Node(s)" unless MASTER_COUNT == 5
  end

  def defineIp(type,i,kvln)
      case type
      when "master" 
        return kvln.split('.')[0..-2].join('.') + ".#{i + 10}"
      when "worker"
        return kvln.split('.')[0..-2].join('.') + ".#{i + 20}"
      when "scaler"
        return kvln.split('.')[0..-2].join('.') + ".#{i + 50}"
      end
  end
  
  def createScaler(config)

    i = 0
    scalerIp = self.defineIp("scaler",i,KV_LAB_NETWORK)

     # if MASTER_COUNT == 1
     #   p "This is a Single Master Cluster with:"
     #   p "---- #{MASTER_COUNT} Master Node"
     #   p "---- #{WORKER_COUNT} Worker(s) Node(s)"
     #  p "---- Provisioned with Kubernetes v#{KUBE_VERSION}"
     #  return
     # end

      if MASTER_COUNT != 1
        puts "---- 1 Scaler Node"
        puts "The Scaler #{i} Ip is #{scalerIp}"
      end

      masterIps = Array[]

      (0..MASTER_COUNT-1).each do |m|
        masterIps.push(self.defineIp("master",m,KV_LAB_NETWORK))
      end

      # p masterIps.length
      # masterIps.each {|s| p s}

      config.vm.define "kv-scaler-#{i}" do |scaler|    
        scaler.vm.box = BOX_IMAGE
        scaler.vm.hostname = "kv-scaler-#{i}"
        scaler.vm.network :private_network, ip: scalerIp, nic_type: "virtio"
        scaler.vm.network "forwarded_port", guest: 6443, host: 6443

        scaler.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
          vb.memory = SCALER_MEMORY
        end

        if !BOX_IMAGE.include? "kuberverse"
          scaler.vm.provider "vmware_desktop" do |v|
            v.vmx["memsize"] = SCALER_MEMORY
            v.vmx["numvcpus"] = "2"
          end
        end
       
        $script = <<-SCRIPT

          echo -e 'Dpkg::Progress-Fancy "1";\nAPT::Color "1";' >> /etc/apt/apt.conf.d/99progress
          echo "# Added by Kuberverse" > /vagrant/hosts.out
          echo "#{scalerIp} kv-scaler.lab.local kv-scaler.local kv-master" >> /vagrant/hosts.out

          mkdir -p /home/vagrant/.kv
          wget -q #{SCALER_SCRIPT_URL} -O /home/vagrant/.kv/scaler.sh
          chmod +x /home/vagrant/.kv/scaler.sh
          /home/vagrant/.kv/scaler.sh "#{KVMSG}" #{scalerIp} "#{masterIps}"
        SCRIPT
        scaler.vm.provision "shell", inline: $script, keep_color: true
      end
  end

  def createMaster(config)
   
    (0..MASTER_COUNT-1).each do |i|
      masterIp = self.defineIp("master",i,KV_LAB_NETWORK)

      puts "The Master #{i} Ip is #{masterIp}"
      config.vm.define "kv-master-#{i}" do |master|
        master.vm.box = BOX_IMAGE
        master.vm.hostname = "kv-master-#{i}"
        master.vm.network :private_network, ip: masterIp, nic_type: "virtio"
        
        $script = ""

        if MASTER_COUNT == 1
          master.vm.network "forwarded_port", guest: 6443, host: 6443
          $script = <<-SCRIPT
            echo "# Added by Kuberverse" > /vagrant/hosts.out
            echo "#{masterIp} kv-master.lab.local kv-master.local kv-master kv-scaler.lab.local" >> /vagrant/hosts.out
          SCRIPT
        end

        master.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
          vb.memory = MASTER_MEMORY
        end

        if !BOX_IMAGE.include? "kuberverse"
          master.vm.provider "vmware_desktop" do |v|
            v.vmx["memsize"] = MASTER_MEMORY
            v.vmx["numvcpus"] = "2"
          end
        end

        $script = $script + <<-SCRIPT

          mkdir -p /home/vagrant/.kv
          
          i=#{i}

          if [ $i == 0 ]; then
            apt install -y apt-cacher-ng

            systemctl start apt-cacher-ng
            systemctl enable apt-cacher-ng

            sed -i "s+# PassThroughPattern: \.\*+PassThroughPattern: .*+g" /etc/apt-cacher-ng/acng.conf
            systemctl restart apt-cacher-ng
          else
            echo 'Acquire::http::Proxy "http://10.8.8.10:3142";' >> /etc/apt/apt.conf.d/00aptproxy
          fi
            echo -e 'Dpkg::Progress-Fancy "1";\nAPT::Color "1";' >> /etc/apt/apt.conf.d/99progress

          wget -q #{COMMON_SCRIPT_URL} -O /home/vagrant/.kv/common.sh
          chmod +x /home/vagrant/.kv/common.sh
          /home/vagrant/.kv/common.sh "#{KVMSG}" #{BOX_IMAGE} #{KUBE_VERSION} #{CONTAINER_RUNTIME}
  
          wget -q #{MASTER_SCRIPT_URL} -O /home/vagrant/.kv/master.sh
          chmod +x /home/vagrant/.kv/master.sh
          /home/vagrant/.kv/master.sh "#{KVMSG}" #{i} #{POD_CIDR} #{masterIp} #{CNI_PROVIDER} #{MASTER_COUNT == 1 ? "single" : "multi"}
        SCRIPT
        master.vm.provision "shell", inline: $script, keep_color: true
      end
    end   
  end

  def createWorker(config)
    (0..WORKER_COUNT-1).each do |i|
      workerIp = self.defineIp("worker",i,KV_LAB_NETWORK)

      puts "The Worker #{i} Ip is #{workerIp}"
      config.vm.define "kv-worker-#{i}" do |worker|
        worker.vm.box = BOX_IMAGE
        worker.vm.hostname = "kv-worker-#{i}"
        worker.vm.network :private_network, ip: workerIp, nic_type: "virtio"
        worker.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--cpus", 2, "--nictype1", "virtio"]
          vb.memory = WORKER_MEMORY
        end

        if !BOX_IMAGE.include? "kuberverse"
          worker.vm.provider "vmware_desktop" do |v|
            v.vmx["memsize"] = WORKER_MEMORY
            v.vmx["numvcpus"] = "2"
          end
        end
  
        $script = <<-SCRIPT

          mkdir -p /home/vagrant/.kv

          echo 'Acquire::http::Proxy "http://10.8.8.10:3142";' >> /etc/apt/apt.conf.d/00aptproxy
          echo -e 'Dpkg::Progress-Fancy "1";\nAPT::Color "1";' >> /etc/apt/apt.conf.d/99progress
  
          wget -q #{COMMON_SCRIPT_URL} -O /home/vagrant/.kv/common.sh
          chmod +x /home/vagrant/.kv/common.sh
          /home/vagrant/.kv/common.sh "#{KVMSG}" #{BOX_IMAGE} #{KUBE_VERSION} #{CONTAINER_RUNTIME}
  
          wget -q #{WORKER_SCRIPT_URL} -O /home/vagrant/.kv/worker.sh
          chmod +x /home/vagrant/.kv/worker.sh
          /home/vagrant/.kv/worker.sh "#{KVMSG}" #{i} #{workerIp} #{MASTER_COUNT == 1 ? "single" : "multi"}
        SCRIPT
        worker.vm.provision "shell", inline: $script, keep_color: true
      end
    end
  end
end

Vagrant.configure("2") do |config|

  kvlab = KvLab.new()

  if ARGV[0] == "up" or ARGV[0] == "status" or ARGV[0] == "destroy" or ARGV[0] == "ssh"
    
    if MASTER_COUNT >= 2
      kvlab.createScaler(config)
    end

    kvlab.createMaster(config)
    kvlab.createWorker(config)


    config.vm.provision "shell",
     run: "always",
     inline: "swapoff -a"
  end
  
end
